(()=>{"use strict";function e(e){var t=e.getBoundingClientRect();return{width:t.width,height:t.height,top:t.top,right:t.right,bottom:t.bottom,left:t.left,x:t.left,y:t.top}}function t(e){if("[object Window]"!==e.toString()){var t=e.ownerDocument;return t&&t.defaultView||window}return e}function n(e){var n=t(e);return{scrollLeft:n.pageXOffset,scrollTop:n.pageYOffset}}function r(e){return e instanceof t(e).Element||e instanceof Element}function o(e){return e instanceof t(e).HTMLElement||e instanceof HTMLElement}function i(e){return e?(e.nodeName||"").toLowerCase():null}function s(e){return((r(e)?e.ownerDocument:e.document)||window.document).documentElement}function a(e){return t(e).getComputedStyle(e)}function c(e){var t=a(e),n=t.overflow,r=t.overflowX,o=t.overflowY;return/auto|scroll|overlay|hidden/.test(n+o+r)}function l(r,a,l){void 0===l&&(l=!1);var p,f,d=s(a),u=e(r),m=o(a),h={scrollLeft:0,scrollTop:0},b={x:0,y:0};return(m||!m&&!l)&&(("body"!==i(a)||c(d))&&(h=(p=a)!==t(p)&&o(p)?{scrollLeft:(f=p).scrollLeft,scrollTop:f.scrollTop}:n(p)),o(a)?((b=e(a)).x+=a.clientLeft,b.y+=a.clientTop):d&&(b.x=function(t){return e(s(t)).left+n(t).scrollLeft}(d))),{x:u.left+h.scrollLeft-b.x,y:u.top+h.scrollTop-b.y,width:u.width,height:u.height}}function p(e){return"html"===i(e)?e:e.assignedSlot||e.parentNode||e.host||s(e)}function f(e){return["html","body","#document"].indexOf(i(e))>=0?e.ownerDocument.body:o(e)&&c(e)?e:f(p(e))}function d(e,n){void 0===n&&(n=[]);var r=f(e),o="body"===i(r),s=t(r),a=o?[s].concat(s.visualViewport||[],c(r)?r:[]):r,l=n.concat(a);return o?l:l.concat(d(p(a)))}function u(e){return["table","td","th"].indexOf(i(e))>=0}function m(e){if(!o(e)||"fixed"===a(e).position)return null;var t=e.offsetParent;if(t){var n=s(t);if("body"===i(t)&&"static"===a(t).position&&"static"!==a(n).position)return n}return t}function h(e){for(var n=t(e),r=m(e);r&&u(r)&&"static"===a(r).position;)r=m(r);return r&&"body"===i(r)&&"static"===a(r).position?n:r||function(e){for(var t=p(e);o(t)&&["html","body"].indexOf(i(t))<0;){var n=a(t);if("none"!==n.transform||"none"!==n.perspective||n.willChange&&"auto"!==n.willChange)return t;t=t.parentNode}return null}(e)||n}var b="top",v="bottom",g="right",y="left",w="start",O=[].concat([b,v,g,y],["auto"]).reduce((function(e,t){return e.concat([t,t+"-"+w,t+"-end"])}),[]),x=["beforeRead","read","afterRead","beforeMain","main","afterMain","beforeWrite","write","afterWrite"];function j(e){var t=new Map,n=new Set,r=[];function o(e){n.add(e.name),[].concat(e.requires||[],e.requiresIfExists||[]).forEach((function(e){if(!n.has(e)){var r=t.get(e);r&&o(r)}})),r.push(e)}return e.forEach((function(e){t.set(e.name,e)})),e.forEach((function(e){n.has(e.name)||o(e)})),r}var E={placement:"bottom",modifiers:[],strategy:"absolute"};function k(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return!t.some((function(e){return!(e&&"function"==typeof e.getBoundingClientRect)}))}function L(e){void 0===e&&(e={});var t=e,n=t.defaultModifiers,o=void 0===n?[]:n,i=t.defaultOptions,s=void 0===i?E:i;return function(e,t,n){void 0===n&&(n=s);var i,a,c={placement:"bottom",orderedModifiers:[],options:Object.assign(Object.assign({},E),s),modifiersData:{},elements:{reference:e,popper:t},attributes:{},styles:{}},p=[],f=!1,u={state:c,setOptions:function(n){m(),c.options=Object.assign(Object.assign(Object.assign({},s),c.options),n),c.scrollParents={reference:r(e)?d(e):e.contextElement?d(e.contextElement):[],popper:d(t)};var i,a,l=function(e){var t=j(e);return x.reduce((function(e,n){return e.concat(t.filter((function(e){return e.phase===n})))}),[])}((i=[].concat(o,c.options.modifiers),a=i.reduce((function(e,t){var n=e[t.name];return e[t.name]=n?Object.assign(Object.assign(Object.assign({},n),t),{},{options:Object.assign(Object.assign({},n.options),t.options),data:Object.assign(Object.assign({},n.data),t.data)}):t,e}),{}),Object.keys(a).map((function(e){return a[e]}))));return c.orderedModifiers=l.filter((function(e){return e.enabled})),c.orderedModifiers.forEach((function(e){var t=e.name,n=e.options,r=void 0===n?{}:n,o=e.effect;if("function"==typeof o){var i=o({state:c,name:t,instance:u,options:r});p.push(i||function(){})}})),u.update()},forceUpdate:function(){if(!f){var e=c.elements,t=e.reference,n=e.popper;if(k(t,n)){var r;c.rects={reference:l(t,h(n),"fixed"===c.options.strategy),popper:(r=n,{x:r.offsetLeft,y:r.offsetTop,width:r.offsetWidth,height:r.offsetHeight})},c.reset=!1,c.placement=c.options.placement,c.orderedModifiers.forEach((function(e){return c.modifiersData[e.name]=Object.assign({},e.data)}));for(var o=0;o<c.orderedModifiers.length;o++)if(!0!==c.reset){var i=c.orderedModifiers[o],s=i.fn,a=i.options,p=void 0===a?{}:a,d=i.name;"function"==typeof s&&(c=s({state:c,options:p,name:d,instance:u})||c)}else c.reset=!1,o=-1}}},update:(i=function(){return new Promise((function(e){u.forceUpdate(),e(c)}))},function(){return a||(a=new Promise((function(e){Promise.resolve().then((function(){a=void 0,e(i())}))}))),a}),destroy:function(){m(),f=!0}};if(!k(e,t))return u;function m(){p.forEach((function(e){return e()})),p=[]}return u.setOptions(n).then((function(e){!f&&n.onFirstUpdate&&n.onFirstUpdate(e)})),u}}var M={passive:!0};function D(e){return e.split("-")[0]}var S={top:"auto",right:"auto",bottom:"auto",left:"auto"};function P(e){var n,r=e.popper,o=e.popperRect,i=e.placement,a=e.offsets,c=e.position,l=e.gpuAcceleration,p=e.adaptive,f=function(e){var t=e.x,n=e.y,r=window.devicePixelRatio||1;return{x:Math.round(t*r)/r||0,y:Math.round(n*r)/r||0}}(a),d=f.x,u=f.y,m=a.hasOwnProperty("x"),w=a.hasOwnProperty("y"),O=y,x=b,j=window;if(p){var E=h(r);E===t(r)&&(E=s(r)),i===b&&(x=v,u-=E.clientHeight-o.height,u*=l?1:-1),i===y&&(O=g,d-=E.clientWidth-o.width,d*=l?1:-1)}var k,L=Object.assign({position:c},p&&S);return l?Object.assign(Object.assign({},L),{},((k={})[x]=w?"0":"",k[O]=m?"0":"",k.transform=(j.devicePixelRatio||1)<2?"translate("+d+"px, "+u+"px)":"translate3d("+d+"px, "+u+"px, 0)",k)):Object.assign(Object.assign({},L),{},((n={})[x]=w?u+"px":"",n[O]=m?d+"px":"",n.transform="",n))}var C=L({defaultModifiers:[{name:"eventListeners",enabled:!0,phase:"write",fn:function(){},effect:function(e){var n=e.state,r=e.instance,o=e.options,i=o.scroll,s=void 0===i||i,a=o.resize,c=void 0===a||a,l=t(n.elements.popper),p=[].concat(n.scrollParents.reference,n.scrollParents.popper);return s&&p.forEach((function(e){e.addEventListener("scroll",r.update,M)})),c&&l.addEventListener("resize",r.update,M),function(){s&&p.forEach((function(e){e.removeEventListener("scroll",r.update,M)})),c&&l.removeEventListener("resize",r.update,M)}},data:{}},{name:"popperOffsets",enabled:!0,phase:"read",fn:function(e){var t=e.state,n=e.name;t.modifiersData[n]=function(e){var t,n=e.reference,r=e.element,o=e.placement,i=o?D(o):null,s=o?function(e){return e.split("-")[1]}(o):null,a=n.x+n.width/2-r.width/2,c=n.y+n.height/2-r.height/2;switch(i){case b:t={x:a,y:n.y-r.height};break;case v:t={x:a,y:n.y+n.height};break;case g:t={x:n.x+n.width,y:c};break;case y:t={x:n.x-r.width,y:c};break;default:t={x:n.x,y:n.y}}var l=i?function(e){return["top","bottom"].indexOf(e)>=0?"x":"y"}(i):null;if(null!=l){var p="y"===l?"height":"width";switch(s){case w:t[l]=Math.floor(t[l])-Math.floor(n[p]/2-r[p]/2);break;case"end":t[l]=Math.floor(t[l])+Math.ceil(n[p]/2-r[p]/2)}}return t}({reference:t.rects.reference,element:t.rects.popper,strategy:"absolute",placement:t.placement})},data:{}},{name:"computeStyles",enabled:!0,phase:"beforeWrite",fn:function(e){var t=e.state,n=e.options,r=n.gpuAcceleration,o=void 0===r||r,i=n.adaptive,s=void 0===i||i,a={placement:D(t.placement),popper:t.elements.popper,popperRect:t.rects.popper,gpuAcceleration:o};null!=t.modifiersData.popperOffsets&&(t.styles.popper=Object.assign(Object.assign({},t.styles.popper),P(Object.assign(Object.assign({},a),{},{offsets:t.modifiersData.popperOffsets,position:t.options.strategy,adaptive:s})))),null!=t.modifiersData.arrow&&(t.styles.arrow=Object.assign(Object.assign({},t.styles.arrow),P(Object.assign(Object.assign({},a),{},{offsets:t.modifiersData.arrow,position:"absolute",adaptive:!1})))),t.attributes.popper=Object.assign(Object.assign({},t.attributes.popper),{},{"data-popper-placement":t.placement})},data:{}},{name:"applyStyles",enabled:!0,phase:"write",fn:function(e){var t=e.state;Object.keys(t.elements).forEach((function(e){var n=t.styles[e]||{},r=t.attributes[e]||{},s=t.elements[e];o(s)&&i(s)&&(Object.assign(s.style,n),Object.keys(r).forEach((function(e){var t=r[e];!1===t?s.removeAttribute(e):s.setAttribute(e,!0===t?"":t)})))}))},effect:function(e){var t=e.state,n={popper:{position:t.options.strategy,left:"0",top:"0",margin:"0"},arrow:{position:"absolute"},reference:{}};return Object.assign(t.elements.popper.style,n.popper),t.elements.arrow&&Object.assign(t.elements.arrow.style,n.arrow),function(){Object.keys(t.elements).forEach((function(e){var r=t.elements[e],s=t.attributes[e]||{},a=Object.keys(t.styles.hasOwnProperty(e)?t.styles[e]:n[e]).reduce((function(e,t){return e[t]="",e}),{});o(r)&&i(r)&&(Object.assign(r.style,a),Object.keys(s).forEach((function(e){r.removeAttribute(e)})))}))}},requires:["computeStyles"]}]});const T={name:"offset",enabled:!0,phase:"main",requires:["popperOffsets"],fn:function(e){var t=e.state,n=e.options,r=e.name,o=n.offset,i=void 0===o?[0,0]:o,s=O.reduce((function(e,n){return e[n]=function(e,t,n){var r=D(e),o=[y,b].indexOf(r)>=0?-1:1,i="function"==typeof n?n(Object.assign(Object.assign({},t),{},{placement:e})):n,s=i[0],a=i[1];return s=s||0,a=(a||0)*o,[y,g].indexOf(r)>=0?{x:a,y:s}:{x:s,y:a}}(n,t.rects,i),e}),{}),a=s[t.placement],c=a.x,l=a.y;null!=t.modifiersData.popperOffsets&&(t.modifiersData.popperOffsets.x+=c,t.modifiersData.popperOffsets.y+=l),t.modifiersData[r]=s}},W=[{selector:"kubernetes-popup",html:'Сервис для автоматизации развёртывания, масштабирования и управления приложениями на основе Kubernetes. <a class="tooltip-link" rel="noopener noreferrer" target="_self" href="https://sbercloud.ru/ru/products/cloud-container-engine">Подробнее</a>'},{selector:"functional-graph-popup",html:'Позволяет размещать и запускать код (функцию) в бессерверной среде. Запуск функции происходит на определенный пользователем триггер. <a class="tooltip-link" rel="noopener noreferrer" target="_self" href="https://sbercloud.ru/ru/products/functiongraph-serverless">Подробнее</a></span>'},{selector:"api-gateway-popup",html:'Высокопроизводительный, полностью управляемый хостинг API, который помогает и упрощает публикацию, обслуживание, мониторинг, защиту и использование API в любых масштабах. В пару кликов вы можете внедрить системную интеграцию и значительно расширить функционал своего сервиса. <a class="tooltip-link" rel="noopener noreferrer" target="_self" href="https://sbercloud.ru/ru/products/api-gateway">Подробнее</a>'},{selector:"graph-engine-popup",html:'Первая в Китае коммерческая автономная распределенная система графов с независимыми правами на интеллектуальную собственность. <a class="link-1 external-link" rel="noopener noreferrer" target="_self" href="https://sbercloud.ru/ru/products/graph-engine-service-ges">Подробнее</a>'},{selector:"document-database-popup",html:'Предоставляет собой сервис управления документоориентированной базой данных, полностью совместимой с MongoDB. <a class="link-1 external-link" rel="noopener noreferrer" target="_self" href="https://sbercloud.ru/ru/products/document-database-service-mongodb">Подробнее</a>'},{selector:"distributed-cache-popup",html:'Высокопроизводительный распределенный сервис кэширования данных в памяти. <br /> <a class="link-1 external-link" rel="noopener noreferrer" target="_self" href="https://sbercloud.ru/ru/products/distributed-cache-service-for-memcached">For Memcached</a> <br /> <a class="link-1 external-link" rel="noopener noreferrer" target="_self" href="https://sbercloud.ru/ru/products/distributed-cache-service-for-redis">For Redis</a>'},{selector:"relational-database-popup",html:'Сервис управления реляционными базами данных. <a class="link-1 external-link" rel="noopener noreferrer" target="_self" href="https://sbercloud.ru/ru/products/relational-databases-service">Подробнее</a>'},{selector:"best-startup",html:"100 000 р. грант на облачные услуги SberCloud для действующих компаний (выдается только на юр. лицо или ИП)"},{selector:"best-dev",html:"Квадрокоптер DJI Mavic Mini Fly More Combo"},{selector:"special-price",html:"Фирменный мерч Школы 21"},{selector:"special-nomination",html:"Подробности будут объявлены отдельно"},{selector:"grants-sber",html:"Гранты на использование SberCloud.Advanced всем командам, прошедшим отбор на хакатон"},{selector:"merch-package",html:"Всем, кто презентует свои решения жюри"},{selector:"online-promo",html:"Всем, кто принимает участие в онлайн-активностях"},{selector:"promo-delivery",html:"После прохождения чек-поинтов"},{selector:"hakaton-about",html:"Хакатон - командное соревнование для программистов, дизайнеров и менеджеров, решающих в короткие сроки социальную или бизнес-задачу."},{selector:"can-i",html:"В хакатоне могут принять участие команды от 3 до 5 человек. Одному человеку крайне непросто закрыть все необходимые компетенции."},{selector:"what-todo",html:"В хакатоне могут принять участие команды от 3 до 5 человек. Одному человеку крайне непросто закрыть все необходимые компетенции."},{selector:"i-new",html:"Конечно! <br/> Команде хакатона требуются разные роли: менеджеры, питчеры, дизайнеры и маркетологи. Если у вас есть опыт в каком-либо вопросе, это может пригодиться. Просто зарегистрируйтесь и опишите свой опыт - наверняка вы можете быть полезны одной из команд."},{selector:"answer-todo",html:'Напишите нам в <a class="link-1 external-link" rel="noopener noreferrer" target="_self" href="https://t.me/joinchat/CN0_CRu4NI1L0DStXsp_dw">чат хакатона</a> - будем рады ответить на вопросы и помочь.'}];document.addEventListener("DOMContentLoaded",(()=>{!function(e){const t=document.querySelectorAll("html");if(0===t.length)throw new Error("Not a single element was found");function n(){if(window.innerWidth<600){const e=window.innerWidth/600;r.style.fontSize=8*e+"px"}else if(window.innerWidth<1300){const e=Math.max(6/8,window.innerWidth/1300);r.style.fontSize=8*e+"px"}else r.style.fontSize="8px"}const r=t[0];window.addEventListener("resize",n),n()}(),(e=>{if(isNaN(600))throw new Error("baseWidth is required");(function(e){let t=null;const n=function(){let e=null;const t=document.createElement("div");t.classList.add("popup-tooltip"),t.innerHTML='\n        <div class="popup-tooltip--container">\n            <div class="popup-tooltip--body-wrapper"></div>\n        </div>\n    ';const n=t.querySelector(".popup-tooltip--body-wrapper");return{element:t,container:n,updateHtml:t=>{n.innerHTML=t,e=t},hide:()=>t.style.display="none",show:()=>t.style.display=""}}();n.hide(),document.body.appendChild(n.element),document.body.addEventListener("click",(e=>{e.target!==n.container&&t&&(n.hide(),t.destroy(),t=null)})),W.forEach((r=>{const o=document.getElementById(r.selector);o.addEventListener("click",(async i=>{window.innerWidth<e||(t&&t.state.elements.reference!==o&&(n.hide(),t.destroy(),t=null),t||(i.stopPropagation(),n.updateHtml(r.html),n.show(),t=C(o,n.element,{placement:"top",modifiers:[T,{name:"offset",options:{offset:[0,10]}}]}),t.update()))}))}))})(600),function(e){const t=function(){const e=document.createElement("div");e.classList.add("modal-tooltip"),e.innerHTML='\n        <div class="modal-tooltip--container">\n            <button class="modal-tooltip--close">+</button>\n            <div class="modal-tooltip--body-wrapper"></div>\n        </div>\n    ';const t=e.querySelector(".modal-tooltip--body-wrapper");e.classList.add("hidden");const n=()=>e.classList.add("hidden");return e.addEventListener("click",(e=>{e.target!==t&&n()})),{element:e,updateHtml:e=>{t.innerHTML=e},open:()=>e.classList.remove("hidden"),close:n}}();document.body.appendChild(t.element),W.forEach((n=>{document.getElementById(n.selector).addEventListener("click",(()=>{window.innerWidth>=e||(t.updateHtml(n.html),t.open())}))}))}(600)})()}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,